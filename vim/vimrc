"
" dotphiles : https://github.com/dotphiles/dotphiles
"
" Setup vim and load required plugins before dotvim
"
" Authors:
"   Ben O'Hara <bohara@gmail.com>
"

" Call dotvim
source ~/.vim/dotvim.vim

if has("user_commands")
  set nocompatible
  filetype off
  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()
  "let g:vundles=['general', 'git', 'hg', 'programming', 'completion', 'ruby', 'python', 'misc']
  "let g:vundles=['general', 'programming', 'ruby']
  let g:vundles=[]
  let g:neocomplcache_enable_at_startup = 1
  " Load 'vundles'
  source ~/.vim/vundles.vim
  " Add extra bundles here...
  " Bundle 'reponame'
  Bundle 'chriskempson/base16-vim'
  Bundle 'ctrlpvim/ctrlp.vim'
  Bundle 'easymotion/vim-easymotion'
  Plugin 'MarcWeber/vim-addon-mw-utils'
  Plugin 'tomtom/tlib_vim'
  Plugin 'tpope/vim-fugitive'
  Plugin 'garbas/vim-snipmate'

  " Optional:
  Plugin 'pietgeursen/vim-snippets'
  Plugin 'geekjuice/vim-spec'
  Plugin 'jgdavey/tslime.vim'
  Plugin 'tpope/vim-dispatch.git'
  Plugin 'scrooloose/nerdtree'
  Plugin 'vim-scripts/YankRing.vim'
endif

" Customize to your needs...
syntax enable
set background=dark
colorscheme base16-default
let base16colorspace=256

"Remap ESC keys
:imap jj <Esc>

"Paste form os clipboard
noremap <leader>y "+y
noremap <leader>yy "+Y

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  +<CR>:set nopaste<CR>

" Tab between buffers
noremap <tab> <c-w><c-w>
nmap <leader>q :bd<CR>

" Fugitive
nmap <leader>t :Gstatus<CR>
nmap <leader>r :Git co 
nmap <leader>u :Gpush origin 
nmap <leader>um :Gpush origin master <CR>

"" ctrlp.vim
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
let g:ctrlp_working_path_mode = 'ra'

" let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_use_caching = 0
cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
noremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_map = '<leader>e'
let g:ctrlp_open_new_file = 'r'

" vim spec
nmap <BS> :call RunCurrentSpecFile()<CR>
nmap \ :call RunNearestSpec()<CR>
nmap <CR> :call RunLastSpec()<CR>
map <leader>s :call RunAllSpecs()<CR>
map <leader>a :call Send_to_Tmux("rake\n")<CR>
map <leader>g :call Send_to_Tmux("grunt test\n")<CR>
nmap ` :call Send_to_Tmux("npm test\n")<CR>

let g:npm_test_command = ':call Send_to_Tmux("TEST={spec} npm run vim-spec\n")'
let g:rspec_command = ':call Send_to_Tmux("VIM=1 bundle exec rspec {spec}\n")'
let g:mocha_js_command = ':call Send_to_Tmux("NODE_ENV=test VIM=1 mocha --recursive {spec}\n")'
let g:cucumber_command = ':call Send_to_Tmux("VIM=1 cucumber {spec}\n")'
let g:mocha_coffee_command = ':call Send_to_Tmux("NODE_ENV=test VIM=1 mocha -b --recursive --compilers coffee:coffee-script/register {spec}\n")'

"map <leader>t :call Send_to_Tmux("rake cucumber:wip\n")
" npm build via tmux
nmap <C-B> :call Send_to_Tmux("npm run build\n")<CR>
